<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= @question.description %></title>
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;700;900&display=swap" rel="stylesheet">
  <link href="/css/output.css" rel="stylesheet">
  <link href="icon.ico" rel="icon">
  <style>
    body {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      height: 100vh;
    }

    section {
      display: flex;
      height: 100vh;
      justify-content: center;
      align-items: center;
      background: linear-gradient(to bottom, #6b46c1, #cbd5e0); /* Gradiente de púrpura a gris */
    }

    .game-container {
      position: relative;
      width: 90vw;
      height: 70vh;
      max-width: 800px;
      background-color: #e2e8f0;
      border-radius: 10px;
      overflow: hidden;
    }

    .player-bar {
      position: absolute;
      bottom: 0;
      left: 0;
      width: 15%; /* Reducir tamaño de la barra */
      height: 4%;  /* Más plana */
      background-color: black;
      border-radius: 5px;
    }

    .falling-object {
      position: absolute;
      font-size: 2rem;
      font-family: 'Nunito', sans-serif;
      color: black;
    }
  </style>
</head>
<body>

<section>
  <article class="flex flex-col items-center mt-0 mb-0 rounded-xl shadow-sm bg-white bg-opacity-80 px-4"> 
    <button onclick="toggleHelpModal()" class="absolute top-2 right-2 hover:scale-105 hover:transition-all transition duration-200">
      <img loading="lazy" src="https://cdn.builder.io/api/v1/image/assets/TEMP/72823194a7d8c0df30eef42247c0bbe3e290abf4fb1c9e37ed6e1cb9eda1c452?apiKey=0336232ee457421bbd9ee3e8fe6e3499&" alt="Ayuda" class="w-16 aspect-[0.77]" />
    </button>

    <h2 class="mt-1.5 text-xl font-extrabold text-center text-purple-950 max-md:max-w-full">Puntuación Actual: <%= session[:user_level_score] %></h2>
    <h1 class="mt-1.5 text-4xl font-extrabold text-center text-black max-md:max-w-full"><%= @question.description %></h1>

    <div class="game-container mt-10">
      <div id="player-bar" class="player-bar"></div>
    </div>
  </article>
</section>

<!-- Help Modal -->
<div id="help-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
  <div class="bg-white flex flex-col items-end rounded-lg overflow-hidden shadow-xl max-w-lg w-full p-4">
    <button onclick="toggleHelpModal()" class="relative">&times;</button>
    <img src="https://www.electronics-notes.com/images/morse-code-table-alphabet-letters.svg" alt="Tabla" class="w-full h-auto">
  </div>
</div>

<script>
function toggleHelpModal() {
  var modal = document.getElementById('help-modal');
  modal.classList.toggle('hidden');
}

// Variables globales
let intervalId = null;
const movementSpeed = 5; // Ajustado para un movimiento más lento
const fallingSpeed = 3;  // Velocidad de caída de los objetos

// Mover la barra a la izquierda
function moveLeft() {
  const playerBar = document.getElementById('player-bar');
  const container = playerBar.parentElement;
  let playerPosition = playerBar.offsetLeft;

  if (playerPosition > 0) {
    playerBar.style.left = (playerPosition - movementSpeed) + 'px';
  }
}

// Mover la barra a la derecha
function moveRight() {
  const playerBar = document.getElementById('player-bar');
  const container = playerBar.parentElement;
  let playerPosition = playerBar.offsetLeft;
  const containerWidth = container.offsetWidth;

  if (playerPosition + playerBar.offsetWidth < containerWidth) {
    playerBar.style.left = (playerPosition + movementSpeed) + 'px';
  }
}

// Detectar teclas presionadas
document.addEventListener('keydown', function(event) {
  if (intervalId) {
    clearInterval(intervalId);
  }

  if (event.key === 'ArrowLeft' || event.key === 'a') {
    intervalId = setInterval(moveLeft, 10);
  } else if (event.key === 'ArrowRight' || event.key === 'd') {
    intervalId = setInterval(moveRight, 10);
  }
});

// Detener el movimiento al soltar la tecla
document.addEventListener('keyup', function(event) {
  if (intervalId) {
    clearInterval(intervalId);
  }
});

// Generar objetos aleatorios (caracteres morse) que caen
function createFallingObject() {
  const gameContainer = document.querySelector('.game-container');
  const fallingObject = document.createElement('div');
  fallingObject.classList.add('falling-object');
  fallingObject.textContent = Math.random() > 0.5 ? '.' : '-';
  fallingObject.style.left = Math.random() * (gameContainer.offsetWidth - 30) + 'px'; // Posición aleatoria
  gameContainer.appendChild(fallingObject);

  let position = 0;
  const fallInterval = setInterval(() => {
    if (position < gameContainer.offsetHeight - 40) {
      position += fallingSpeed;
      fallingObject.style.top = position + 'px';

      // Detectar colisión con la barra
      const playerBar = document.getElementById('player-bar');
      const playerBarRect = playerBar.getBoundingClientRect();
      const fallingObjectRect = fallingObject.getBoundingClientRect();

      if (
        fallingObjectRect.bottom >= playerBarRect.top && // Toca la parte superior de la barra
        fallingObjectRect.bottom <= playerBarRect.bottom && // Se asegura que está tocando la barra y no más arriba
        fallingObjectRect.left < playerBarRect.right &&
        fallingObjectRect.right > playerBarRect.left
      ) {
        clearInterval(fallInterval);
        fallingObject.remove(); // Elimina el objeto al colisionar con la barra
      }
    } else {
      clearInterval(fallInterval);
      fallingObject.remove(); // Elimina el objeto si llega al fondo
    }
  }, 20);
}

// Crear objetos cada cierto tiempo
setInterval(createFallingObject, 2000); // Genera un objeto cada 2 segundos

</script>

</body>
</html>
