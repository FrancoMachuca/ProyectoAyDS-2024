<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= @question.description %></title>
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;700;900&display=swap" rel="stylesheet">
  <link href="/css/output.css" rel="stylesheet">
  <link href="icon.ico" rel="icon">
  <style>
    .game-container {
      position: relative;
      width: 90vw;
      height: 70vh;
      max-width: 800px;
      background-color: #e2e8f0;
      border-radius: 10px;
      overflow: hidden;
    }

    .player-bar {
      position: absolute;
      bottom: 0;
      left: 0;
      width: 20%; 
      height: 5%;
      background-color: black;
      border-radius: 5px;
    }

    .falling-object {
      position: absolute;
      font-size: 64px;
      font-family: 'Nunito', sans-serif;
    }

  </style>
</head>
<body>

<section class="flex h-screen justify-center items-center px-16 whitespace-nowrap leading-[150%] max-md:px-5 bg-gradient-to-b from-purple-800 to-gray-300">
  <article class="flex flex-col items-center mt-0 mb-0 rounded-xl shadow-sm bg-white bg-opacity-80 px-4"> 
    <% if @level.playable_type != "Exam" %>
      <button onclick="toggleHelpModal()" class="absolute top-2 right-2 hover:scale-105 hover:transition-all transition duration-200">
        <img loading="lazy" src="https://cdn.builder.io/api/v1/image/assets/TEMP/72823194a7d8c0df30eef42247c0bbe3e290abf4fb1c9e37ed6e1cb9eda1c452?apiKey=0336232ee457421bbd9ee3e8fe6e3499&" alt="Ayuda" class="w-16 aspect-[0.77]" />
    </button>
    <% end %>
    <button onclick="toggleQuitModal()" class="absolute top-2 left-2 bg-red-500 text-white p-2 rounded hover:transition-all transition duration-200 hover:ease-in hover:scale-105 hover:bg-red-700"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6"> <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5 3 12m0 0 7.5-7.5M3 12h18" /></svg></button>
    <h2 class="mt-1.5 text-xl font-extrabold text-center text-purple-950 max-md:max-w-full">Puntuacion Actual: <%= session[:user_level_score] %></h2>
    <h1 class="mt-1.5 text-4xl font-extrabold text-center text-black max-md:max-w-full"><%= @question.description %></h1>

    <div class="game-container mt-10">
      <div id="player-bar" class="player-bar"></div>
      <div id="falling-objects"></div>
    </div>
    <h2 class="mt-4 text-xl font-extrabold text-center text-black">Palabra formada: <span id="user_guess"></span></h2>
      <button onclick="playAudio()" class="w-min flex gap-2 p-2 bg-black text-white rounded-xl shadow-sm transition duration-200 hover:bg-purple-700 hover:transition-all hover:scale-105" >
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.347a1.125 1.125 0 0 1 0 1.972l-11.54 6.347a1.125 1.125 0 0 1-1.667-.986V5.653Z" />
        </svg>
        <span id="playPauseText" class="text-sm">Reproducir Música</span>
      </button>
  </article>
</section>

<audio id="audio" src="\media\st1.mp3" preload="auto" loop>
</audio>

<!-- Help Modal -->
<div id="help-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
  <div class="bg-white flex flex-col items-center rounded-lg overflow-hidden shadow-xl max-w-lg w-full p-4">
    <button onclick="toggleHelpModal()" class="relative">&times;</button>
    <img src="https://www.electronics-notes.com/images/morse-code-table-alphabet-letters.svg" alt="Tabla" class="w-full h-auto">
  </div>
</div>

<!-- Tutorial Modal (only for tutorial levels) -->
<% if @level.playable_type == "Tutorial" %>
<div id="tutorial-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
  <div class="bg-white flex flex-col items-center rounded-lg overflow-hidden shadow-xl max-w-lg w-full p-4">
    <h3 class="text-xl font-bold mb-4">Tutorial</h3>
    <p>Bienvenido al tutorial del juego Lluvia Simbólica. La tarea es simple: Traduce la palabra del Español al código morse, tomando los puntos o guines que caen del cielo con tu barra de movimiento.
      la barra se mueve tanto con la tecla a y d del teclado, como con las teclas <-- y -->. La pregunta se termina al formar una palabra de igual longitud que la que debes traducir.
    </p>
    <button 
  onclick="toggleTutorialModal()" 
  class="mt-6 px-6 py-3 bg-black text-white text-lg font-semibold rounded-lg shadow-lg hover:bg-gray-800 transition duration-300 ease-in-out transform hover:scale-105">
  ¡Entendido!
</button>
  </div>
</div>
<% end %>

<!-- Quit Modal -->
<div id="quit-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
  <div class="bg-white flex flex-col items-center rounded-lg overflow-hidden shadow-xl max-w-lg w-full p-4">
    <%= erb :quit_warning %>
  </div>
</div>

<!-- Success Modal -->
<div id="success-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
  <div class="bg-white flex flex-col items-center rounded-lg overflow-hidden shadow-xl max-w-lg w-full p-4">
    <%= erb :success %>
  </div>
</div>

<!-- Failure Modal -->
<div id="failure-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
  <div class="bg-white flex flex-col items-center rounded-lg overflow-hidden shadow-xl max-w-lg w-full p-4">
    <%= erb :exam_failed %>
  </div>
</div>

<!-- Failure Lesson Modal -->
<div id="failure_lesson-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
  <div class="bg-white flex flex-col items-center rounded-lg overflow-hidden shadow-xl max-w-lg w-full p-4">
    <%= erb :lesson_failed %>
  </div>
</div>

<script>

  if (localStorage.getItem('audioTime')) {
    audio.volume = 0.15
    audio.currentTime = localStorage.getItem('audioTime');
  }

  window.addEventListener('beforeunload', () => {
    localStorage.setItem('audioTime', audio.currentTime);
  });

  const playPauseText = document.getElementById('playPauseText');
  function playAudio() {
    const audio = document.getElementById('audio');
    if (audio.paused) {
            audio.volume = 0.15;
            audio.play();
            playPauseText.textContent = 'Pausar Música';
        } else {
            audio.pause();
            playPauseText.textContent = 'Reproducir Música';
        }
  }

  window.onload = playAudio();

isModalOpen = false;

function toggleModal(modalId) {
  var modal = document.getElementById(modalId);
  modal.classList.toggle('hidden');
  isModalOpen = !modal.classList.contains('hidden');
}

function toggleHelpModal() {
  toggleModal('help-modal')
}

function toggleQuitModal() {
  toggleModal('quit-modal')
}

function toggleSuccessModal() {
  toggleModal('success-modal')
}

function toggleFailureModal() {
  toggleModal('failure-modal')
}

function toggleFailureLessonModal() {
  toggleModal('failure_lesson-modal')
}

function toggleTutorialModal() {
  toggleModal('tutorial-modal')
}

function redirectToMenu() {
  window.location.href = '/jugar';
}

function continuarHandler() {
  toggleQuitModal();
}

function salirHandler() {
  redirectToMenu();
}

let formedWord = "";
const correctWord = "<%= @answers.first.answer %>";
const levelId = "<%= @level.id %>";
const questionId = "<%= @question.id %>";
let intervalId = null;
const movementSpeed = 5;

function moveLeft() {
  const playerBar = document.getElementById('player-bar');
  let playerPosition = playerBar.offsetLeft;
  if (playerPosition > 0) {
    playerBar.style.left = (playerPosition - movementSpeed) + 'px';
  }
}

function moveRight() {
  const playerBar = document.getElementById('player-bar');
  let playerPosition = playerBar.offsetLeft;
  const containerWidth = playerBar.parentElement.offsetWidth;
  if (playerPosition + playerBar.offsetWidth < containerWidth) {
    playerBar.style.left = (playerPosition + movementSpeed) + 'px';
  }
}

document.addEventListener('keydown', function(event) {
  if (isModalOpen) return;
  if (intervalId) clearInterval(intervalId);
  if (event.key === 'ArrowLeft' || event.key === 'a') intervalId = setInterval(moveLeft, 10);
  else if (event.key === 'ArrowRight' || event.key === 'd') intervalId = setInterval(moveRight, 10);
});

document.addEventListener('keyup', function(event) {
  if (isModalOpen) return;
  if (intervalId) clearInterval(intervalId);
});

function addCharacterToWord(character) {
  if (formedWord.length < correctWord.length) {
    formedWord += character;
    document.getElementById('user_guess').innerText = formedWord;
    checkWord();
  }
}

function checkWord() {
  if (formedWord.length >= correctWord.length) {
    redirectToPost(levelId, questionId, { user_guess: formedWord });
  }
}

function redirectToPost(levelId, questionId, data) {
  const form = document.createElement('form');
  form.method = 'POST';
  form.action = `/level/${levelId}/${questionId}/check`;

  for (const key in data) {
    if (data.hasOwnProperty(key)) {
      const hiddenField = document.createElement('input');
      hiddenField.type = 'hidden';
      hiddenField.name = key;
      hiddenField.value = data[key];
      form.appendChild(hiddenField);
    }
  }

  document.body.appendChild(form);

  form.submit();
}


function dropObject(character) {
  const gameContainer = document.querySelector('.game-container');
  const object = document.createElement('div');
  object.classList.add('falling-object');
  object.innerText = character;
  object.style.left = Math.random() * (gameContainer.offsetWidth - 50) + 'px';
  object.style.top = '0px';
  gameContainer.appendChild(object);

  const fallSpeed = 10;
  const fallInterval = setInterval(() => {
    const playerBar = document.getElementById('player-bar');
    object.style.top = (object.offsetTop + fallSpeed) + 'px';
    if (object.offsetTop + object.offsetHeight >= playerBar.offsetTop &&
        object.offsetLeft + object.offsetWidth >= playerBar.offsetLeft &&
        object.offsetLeft <= playerBar.offsetLeft + playerBar.offsetWidth) {
      addCharacterToWord(character);
      clearInterval(fallInterval);
      object.remove();
    }
    if (object.offsetTop > gameContainer.offsetHeight) {
      clearInterval(fallInterval);
      object.remove();
    }
  }, 20);
}

function startDropping() {
  const characters = ['.', '-'];
  setInterval(() => {
    if (!isModalOpen) {
      const randomCharacter = characters[Math.floor(Math.random() * characters.length)];
      dropObject(randomCharacter);
    }
  }, 700);
}

startDropping();

<% if @show_success_popup %>
document.addEventListener('DOMContentLoaded', function() {
    toggleSuccessModal();
});
<% end %>

<% if @show_failure_popup && @level.playable_type == "Lesson" %>
document.addEventListener('DOMContentLoaded', function() {
    toggleFailureLessonModal();
});
<% end %>

<% if @show_failure_popup%>
document.addEventListener('DOMContentLoaded', function() {
    toggleFailureModal();
});
<% end %>

<% if @level.playable_type == "Tutorial"  && !@show_failure_popup && !@show_success_popup %>
document.addEventListener('DOMContentLoaded', function() {
    toggleTutorialModal();
});
<% end %>
</script>
</body>
</html>
